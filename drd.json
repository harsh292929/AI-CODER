{
  "project_name": "drd",
  "last_updated": "2024-07-14T13:46:56.118163",
  "files": [
    {
      "filename": "conftest.py",
      "type": "py",
      "last_modified": "2024-07-11T20:58:35.120313",
      "content_preview": "import sys import os  # Add the project root to the Python path sys.path.insert(0, os.path.abspath(o",
      "description": "Test configuration file setting up Python path for project-wide test discovery and execution."
    },
    {
      "filename": "pyproject.toml",
      "type": "toml",
      "last_modified": "2024-07-11T23:59:07.719392",
      "content_preview": "[tool.poetry] name = \"harsh\" version = \"0.4.0\" description = \"A CLI coding super-framework using AI",
      "description": "Python project config file for 'harsh', a CLI coding framework using AI, version 0.4.0."
    },
    {
      "filename": "README.md",
      "type": "md",
      "last_modified": "2024-07-12T11:31:49.552626",
      "content_preview": "# harsh (DRD) - AI-Powered CLI Coding Framework\n\nharsh (DRD) is an advanced, AI-powered CLI coding...",
      "description": "AI-powered CLI coding framework for efficient development with image handling and file operations."
    },
    {
      "filename": "CONTRIBUTING.md",
      "type": "markdown",
      "last_modified": "2024-07-12T11:55:23.903187",
      "content_preview": "# Contributing to harsh (DRD)\n\nFirst off, thank you for considering contributing to harsh! It's pe...",
      "description": "Comprehensive contribution guidelines for the harsh (DRD) project, covering bug reporting, feature suggestions, pull request procedures, coding standards, and community conduct expectations."
    },
    {
      "filename": "poetry.lock",
      "type": "lock",
      "last_modified": "2024-07-11T00:19:50.654679",
      "content_preview": "# This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.  [[packag",
      "description": "Poetry lock file containing package dependencies and versions for a Python project."
    },
    {
      "filename": "run_tests/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T20:47:27.745747",
      "content_preview": "import pytest import sys   def main():     sys.exit(pytest.main([\"-v\", \"src\"]))   if __name__ == \"__",
      "description": "Python script that runs pytest on the 'src' directory with verbose output."
    },
    {
      "filename": "src/drd/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:41:20.725604",
      "content_preview": "from .cli.main import harsh_cli from .cli.query import execute_harsh_command from .metadata.initia",
      "description": "Python module initializing harsh CLI, query execution, and metadata components"
    },
    {
      "filename": "src/drd/main.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.796604",
      "content_preview": "from .cli.main import harsh_cli  if __name__ == \"__main__\":     harsh_cli() ",
      "description": "Python script defining main entry point for harsh CLI application."
    },
    {
      "filename": "src/drd/utils/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T23:25:36.839613",
      "content_preview": "from .utils import (     get_project_context,     print_error,     print_success,     print_info,   ",
      "description": "Utility module with functions for project context, printing messages, and other helper tools."
    },
    {
      "filename": "src/drd/utils/step_executor.py",
      "type": "py",
      "last_modified": "2024-07-11T19:27:58.891259",
      "content_preview": "import subprocess import os import json import click from colorama import Fore, Style import time fr",
      "description": "Python utility module for executing steps, handling subprocess, color output, and timing functionali"
    },
    {
      "filename": "src/drd/utils/utils.py",
      "type": "py",
      "last_modified": "2024-07-12T14:34:36.132190",
      "content_preview": "import click\nfrom colorama import Fore, Style\nimport json\nimport os\nimport time\nimport threading\n\nME...",
      "description": "Utility functions for file operations, project context, and console output formatting."
    },
    {
      "filename": "src/drd/utils/api_utils.py",
      "type": "py",
      "last_modified": "2024-07-12T10:53:08.351815",
      "content_preview": "import requests\nimport os\nimport json\nimport base64\nfrom typing import Dict, Any, Optional\nfrom ..ap...",
      "description": "API utilities for making calls to Claude AI, handling responses, and parsing XML data."
    },
    {
      "filename": "src/drd/cli/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.795110",
      "content_preview": "from .main import harsh_cli from .monitor import run_dev_server_with_monitoring  __all__ = ['harsh",
      "description": "Python module defining CLI functionality for harsh, including main CLI and monitoring tools."
    },
    {
      "filename": "src/drd/cli/main.py",
      "type": "py",
      "last_modified": "2024-07-12T11:09:50.439315",
      "content_preview": "import click\nfrom dotenv import load_dotenv\nfrom colorama import init\nfrom .commands import harsh_c...",
      "description": "CLI entry point for a coding assistant with various commands and options for queries and metadata."
    },
    {
      "filename": "src/drd/cli/tests/test_monitor.py",
      "type": "py",
      "last_modified": "2024-07-11T21:14:30.460248",
      "content_preview": "from src.drd.cli.monitor import DevServerMonitor, run_dev_server_with_monitoring, handle_module_not_",
      "description": "Python test file for DevServerMonitor class and related functions in CLI monitoring module"
    },
    {
      "filename": "src/drd/cli/query/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:40:54.845984",
      "content_preview": "from .main import execute_harsh_command from .file_operations import get_files_to_modify, get_file_",
      "description": "Python module defining CLI query operations for harsh, including file handling and command executio"
    },
    {
      "filename": "src/drd/cli/query/image_handler.py",
      "type": "py",
      "last_modified": "2024-07-11T21:09:22.092552",
      "content_preview": "from ...api.harsh_api import call_harsh_vision_api_with_pagination   def handle_image_query(query, image_path, ins",
      "description": "Python module for handling image queries using harsh Vision API in a CLI application."
    },
    {
      "filename": "src/drd/cli/query/main.py",
      "type": "py",
      "last_modified": "2024-07-12T14:34:36.134605",
      "content_preview": "import click\nfrom ...api.harsh_api import call_harsh_api\nfrom ...api.harsh_parser import parse_dr...",
      "description": "CLI tool for executing harsh commands, handling queries, and managing project metadata."
    },
    {
      "filename": "src/drd/cli/query/file_operations.py",
      "type": "py",
      "last_modified": "2024-07-12T11:09:51.931924",
      "content_preview": "import os\nfrom ...api import call_harsh_api, extract_and_parse_xml\nfrom ...utils import print_error...",
      "description": "Python script for file operations in a CLI tool, handling queries and project context."
    },
    {
      "filename": "src/drd/cli/query/tests/test_file_operations.py",
      "type": "py",
      "last_modified": "2024-07-11T21:05:52.324785",
      "content_preview": "from src.drd.cli.query.file_operations import get_files_to_modify, get_file_content, find_file_with_",
      "description": "Tests for file operations functions in the DRD CLI query module"
    },
    {
      "filename": "src/drd/cli/query/tests/test_image_handler.py",
      "type": "py",
      "last_modified": "2024-07-11T21:08:44.260794",
      "content_preview": "from src.drd.cli.query.image_handler import handle_image_query import unittest from unittest.mock im",
      "description": "Python unit test file for image query handling functionality in a CLI application"
    },
    {
      "filename": "src/drd/prompts/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.797924",
      "content_preview": "from .claude_instructions import get_instruction_prompt from .error_handling import handle_error_wit",
      "description": "Python module initializing imports for Claude instructions and error handling functions."
    },
    {
      "filename": "src/drd/prompts/error_handling.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.798300",
      "content_preview": "import traceback import click from ..utils.api_utils import call_harsh_api from ..api.harsh_parser",
      "description": "Python script for error handling in DRD project, using click and API utils for harsh API interactio"
    },
    {
      "filename": "src/drd/prompts/claude_instructions.py",
      "type": "py",
      "last_modified": "2024-07-11T11:44:56.550515",
      "content_preview": "def get_instruction_prompt():     return \"\"\"     You are an advanced project setup assistant capable",
      "description": "Python module defining an instruction prompt for an AI project setup assistant."
    },
    {
      "filename": "src/drd/prompts/file_operations.py",
      "type": "py",
      "last_modified": "2024-07-07T20:39:54.182355",
      "content_preview": "def get_file_identification_prompt():     return \"\"\"You are a file identification assistant. Based o",
      "description": "Python module with functions to generate prompts for file identification and description tasks."
    },
    {
      "filename": "src/drd/api/harsh_api.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.794600",
      "content_preview": "from ..utils.api_utils import call_harsh_api, call_harsh_vision_api ",
      "description": "Python module for interacting with harsh API, including vision-related functionality."
    },
    {
      "filename": "src/drd/api/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.794374",
      "content_preview": "from .harsh_api import call_harsh_api, call_harsh_vision_api from .harsh_parser import parse_dra",
      "description": "API module initializing harsh API functions and parser for DRA data processing."
    },
    {
      "filename": "src/drd/api/harsh_parser.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.794843",
      "content_preview": "import xml.etree.ElementTree as ET from typing import List, Dict, Any import re   def extract_and_pa",
      "description": "Python script for parsing XML data, extracting information, and processing it using various function"
    },
    {
      "filename": "src/drd/api/tests/test_harsh_parser.py",
      "type": "py",
      "last_modified": "2024-07-11T20:45:24.990520",
      "content_preview": "import unittest from src.drd.api.harsh_parser import extract_and_parse_xml, parse_harsh_response  ",
      "description": "Unit tests for the harsh parser, testing XML extraction and response parsing functionality."
    },
    {
      "filename": "src/drd/metadata/project_metadata.py",
      "type": "py",
      "last_modified": "2024-07-12T11:57:58.525446",
      "content_preview": "import json\nimport os\nfrom datetime import datetime\n\nclass ProjectMetadataManager:\n    def __init__(...",
      "description": "Manages project metadata, including file info and dev server details, stored in drd.json."
    },
    {
      "filename": "src/drd/metadata/__init__.py",
      "type": "py",
      "last_modified": "2024-07-11T19:23:55.796851",
      "content_preview": "from .initializer import initialize_project_metadata from .updater import update_metadata_with_dravi",
      "description": "Python module defining metadata initialization and update functions for a project."
    },
    {
      "filename": "src/drd/metadata/updater.py",
      "type": "py",
      "last_modified": "2024-07-14T13:46:48.108221",
      "content_preview": "import os\nfrom ..api.harsh_api import call_harsh_api_with_pagination\nfrom ..api.harsh_parser impo...",
      "description": "Python module for updating project metadata using the harsh AI system. It includes functions for finding files, calling the harsh API, parsing responses, and updating or removing file metadata. The module interacts with the ProjectMetadataManager, uses utility functions for file operations and output formatting, and handles various scenarios such as missing files and API response parsing. It's designed to work within the context of the DRD project, maintaining and updating metadata based on user descriptions and project structure changes."
    },
    {
      "filename": "src/drd/metadata/initializer.py",
      "type": "py",
      "last_modified": "2024-07-14T13:46:51.584824",
      "content_preview": "import os\nimport json\nfrom datetime import datetime\nfrom ..api.harsh_api import call_harsh_api_wit...",
      "description": "Python module for initializing project metadata. It analyzes the project structure, queries an AI assistant (harsh) for project information, and generates detailed metadata including file descriptions. The module uses API calls, XML parsing, and file operations to create a comprehensive project overview stored in a JSON format."
    },
    {
      "filename": "src/drd/metadata/tests/test_initializer.py",
      "type": "py",
      "last_modified": "2024-07-11T21:20:52.523496",
      "content_preview": "from src.drd.metadata.initializer import initialize_project_metadata import unittest from unittest.m",
      "description": "Python unit test file for initializing project metadata in a data-related application."
    },
    {
      "filename": "src/drd/metadata/tests/test_project_metadata.py",
      "type": "py",
      "last_modified": "2024-07-11T21:19:24.426312",
      "content_preview": "from src.drd.metadata.project_metadata import ProjectMetadataManager import unittest from unittest.m",
      "description": "Python unit test file for ProjectMetadataManager class in DRD metadata module"
    },
    {
      "filename": "src/drd/cli/commands.py",
      "type": "py",
      "last_modified": "2024-07-12T11:14:02.708377",
      "content_preview": "import click\nimport sys\nimport os\nfrom dotenv import load_dotenv\nfrom .query import execute_harsh_c...",
      "description": "CLI tool for executing queries, managing metadata, and interacting with AI models in a development e"
    },
    {
      "filename": "src/drd/cli/ask_handler.py",
      "type": "py",
      "last_modified": "2024-07-12T11:14:01.192978",
      "content_preview": "import click\nimport sys\nfrom ..utils.api_utils import stream_claude_response, call_harsh_api\nfrom ....",
      "description": "CLI handler for asking questions about files, with file content reading and API interaction function"
    },
    {
      "filename": "drd.json",
      "type": "json",
      "last_modified": "2024-07-12T11:14:02.711812",
      "content_preview": "{\n  \"project_name\": \"drd\",\n  \"last_updated\": \"2024-07-12T11:14:02.708239\",\n  \"files\": [\n    {\n      ...",
      "description": ""
    },
    {
      "filename": "src/drd/cli/monitor/server_monitor.py",
      "type": "py",
      "last_modified": "2024-07-14T13:31:13.794185",
      "content_preview": "import click\nimport time\nimport re\nimport os\nfrom typing import Dict, Callable\nfrom ...metadata.proj...",
      "description": "Python module implementing a DevServerMonitor class for monitoring and managing a development server process. It includes functionality for starting, stopping, and restarting the server, handling errors, and processing user input. The module is part of the CLI monitoring system in the DRD project, designed to work with the project's metadata management and error handling components."
    },
    {
      "filename": "src/drd/cli/monitor/error_resolver.py",
      "type": "py",
      "last_modified": "2024-07-14T13:31:17.829571",
      "content_preview": "import traceback\nfrom ...api.harsh_api import call_harsh_api_with_pagination\nfrom ...api.harsh_pa...",
      "description": "Python module for error resolution in the DRD project's monitoring system. It handles runtime errors by analyzing them, querying an AI assistant (harsh) for solutions, and applying fixes with user confirmation. The module integrates with the project's API, parser, and utility functions to manage error contexts, execute commands, and perform file operations. It's designed to work within a server monitoring thread, providing interactive error handling and resolution capabilities."
    },
    {
      "filename": "src/drd/cli/monitor/error_handlers.py",
      "type": "py",
      "last_modified": "2024-07-14T13:31:21.050445",
      "content_preview": "import re\nfrom .error_resolver import monitoring_handle_error_with_harsh\n\n\ndef handle_module_not_fo...",
      "description": "Python module containing error handling functions for the CLI monitoring system. It includes handlers for module not found errors, syntax errors, and general errors. These handlers use regex to parse error messages and call the monitoring_handle_error_with_harsh function from the error_resolver module to process and potentially resolve the errors using the harsh AI system."
    },
    {
      "filename": "src/drd/cli/monitor/__init__.py",
      "type": "py",
      "last_modified": "2024-07-14T13:31:23.868643",
      "content_preview": "from .server_monitor import run_dev_server_with_monitoring\n\n__all__ = ['run_dev_server_with_monitori...",
      "description": "Python module initializing the monitor package, exposing the run_dev_server_with_monitoring function from the server_monitor module. This file serves as the entry point for the CLI monitoring functionality in the harsh (DRD) project."
    },
    {
      "filename": "src/drd/metadata/common_utils.py",
      "type": "py",
      "last_modified": "2024-07-14T13:46:56.118366",
      "content_preview": "import os\nimport re\nfrom ..api.harsh_api import call_harsh_api_with_pagination\nfrom ..api.harsh_p...",
      "description": "Python module containing utility functions for metadata management in the DRD project. It includes functions for parsing .gitignore files, determining file exclusions, generating folder structures, and creating file descriptions. The module integrates with the project's API and parser components to generate metadata using AI assistance. Key functionalities include gitignore pattern parsing, file/folder exclusion logic, folder structure generation, and AI-assisted file description generation. This module is crucial for maintaining project context and organizing metadata across the DRD application."
    }
  ],
  "dev_server": {
    "start_command": "python src/drd/main.py",
    "framework": "None specifically identified",
    "language": "Python"
  },
  "description": "This project, named \"drd\", appears to be a Python-based application with both CLI and API components. It includes utilities for step execution, description generation, and API interactions. The project structure suggests it deals with image handling, file operations, and possibly integrates with an external API (harsh API). It also includes metadata management and updating capabilities. The presence of test files indicates a focus on test-driven development. The project likely involves some form of data processing or automation, potentially related to image analysis or file management tasks."
}